#!/usr/bin/env node

var fs = require('fs'),
    crypto = require('crypto'),
    request = require('request'),
    cleanCSS = require('clean-css'),
    requestParams;

function requestParamsToString(params) {
  var ret = [], key;

  for(key in params) {
    ret.push(key + '=' + params[key]);
  }

  return ret.join('&');
}

fs.readFile('./public/js/app.js', 'utf8', function(err, js) {
  if (!err) {

    // Setup request body
    var requestBody = requestParamsToString({
      'js_code': encodeURIComponent(js),
      'compilation_level': 'SIMPLE_OPTIMIZATIONS',
      'output_format': 'text',
      'output_info': 'compiled_code'
    });

    request({
      url: 'http://closure-compiler.appspot.com/compile', 
      method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded'},
      body: requestBody
    }, function(error, response, body) {
      if (!error && response.statusCode == 200) {
        var hash = crypto.createHash('md5').update(body).digest("hex");
        console.log('Writing '+ hash + '.js');
        fs.writeFile('./public/js/'+hash+'.js', body);
      }
      else {
        console.log(error);
      }
    });
  }
  else {
    console.log(err);
  }
});

fs.readFile('./public/css/style.css', 'utf8', function(err, css) {
  if (!err) {
    var compressed = cleanCSS.process(css);
    var hash = crypto.createHash('md5').update(compressed).digest("hex");
    console.log('Writing '+ hash + '.css');
    fs.writeFile('./public/css/'+hash+'.css', compressed);
  }
  else {
    console.log(err);
  }
});
